== Idioms.function == map:if, shortcut:f  ==
/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  |?FUNCTION_NAME|
 *  Description:  
 * =====================================================================================
 */
void<CURSOR>
|FUNCTION_NAME| ( <+argument_list+> )
{
<SPLIT>	return <+return_value+>;
}		/* -----  end of function |FUNCTION_NAME|  ----- */
== Idioms.function-static == map:isf, shortcut:t  ==
/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  |?FUNCTION_NAME|
 *  Description:  
 * =====================================================================================
 */
static void<CURSOR>
|FUNCTION_NAME| ( <+argument_list+> )
{
<SPLIT>	return <+return_value+>;
}		/* -----  end of static function |FUNCTION_NAME|  ----- */
== Idioms.main == map:im, shortcut:m  ==

#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <cstring>
#include <cstdlib>
#include <numeric>
#include <utility>
#include <sstream>
#include <iomanip>
#include <iostream>
#include <algorithm>

using namespace std;

typedef long long Long;
typedef double DD;
typedef vector<int> VI;
typedef vector<VI > VVI;
typedef pair<int,int> PII;
typedef pair<Long, Long> PLL;
typedef vector<PII> VPII;
typedef vector<PLL> VPLL;

const int INF = 2000000000;
const int MOD = 1000000007;

#define sf scanf
#define pf printf
#define mem(a,b)          memset(a,b,sizeof(a))
#define pb push_back
#define REP(i,a,b)        for(int i=a; i<=b; ++i)
#define REPI(i,a,b,c)     for(int i=a; i<=b; i+=c)
#define REPR(i,a,b)       for(int i=b; i>=a; --i)
#define REPRD(i,a,b,c)    for(int i=b; i>=a; i-=c)
#define REPB(i,a)         for(int i=a; ;i++)
#define REPRB(i,a)        for(int i=a; ; i--)
#define mp(a,b)   make_pair(a,b)
#define fs        first
#define sc        second
#define SZ(s)     ((int)s.size())
#define PI        3.141592653589793
#define VS        vector<string>
#define VI        vector<int>
#define VD        vector<DD>
#define VL        vector<Long>
#define VVL       vector<VL >
#define lim       11
#define tlim      (1<<((int)ceil(log2(lim))+1))
#define unq(vec)  stable_sort(vec.begin(),vec.end());\
	vec.resize(distance(vec.begin(),unique(vec.begin(),vec.end())));
#define BE(a)     a.begin(),a.end()
#define rev(a)    reverse(BE(a))
#define sorta(a)  stable_sort(BE(a))
#define sortc(a, comp)  sort(BE(a),comp)

//int X[]={1,1,2,2,-1,-1,-2,-2},Y[]={2,-2,1,-1,2,-2,1,-1};//knight move
//int X[]={0,-1,-1,-1,0,1,1,1},Y[]={-1,-1,0,1,1,1,0,-1};//8 move
//int X[]={-1,0,1,0},Y[]={0,1,0,-1};//4 move

/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  main
 *  Description:  
 * =====================================================================================
 */

int main(int argc, const char **argv){
	//ios::sync_with_stdio(false);
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	//double st=clock(),en;
<CURSOR>			
//en=clock();
//cerr<<(double)(en-st)/CLOCKS_PER_SEC<<endl;
return 0;
}
/* ----------  end of function main  ---------- */

== Idioms.enum == map:ie, shortcut:e  ==
enum |?ENUM_NAME| {<CURSOR>
<SPLIT>};				/* ----------  end of enum |ENUM_NAME|  ---------- */

typedef enum |ENUM_NAME| |ENUM_NAME:c|;
== Idioms.struct == map:is, shortcut:s  ==
struct |?STRUCT_NAME| {<CURSOR>
<SPLIT>};				/* ----------  end of struct |STRUCT_NAME|  ---------- */

typedef struct |STRUCT_NAME| |STRUCT_NAME:c|;
== Idioms.union == map:iu, shortcut:u  ==
union |?UNION_NAME| {<CURSOR>
<SPLIT>};				/* ----------  end of union |UNION_NAME|  ---------- */

typedef union |UNION_NAME| |UNION_NAME:c|;
== Idioms.scanf == map:isc, shortcut:s, insert  ==
scanf ( "<CURSOR>", & );
== Idioms.printf == map:ipr, shortcut:p, insert  ==
printf ( "<CURSOR>\n" );
== Idioms.calloc == map:ica, shortcut:c  ==
|?POINTER|	= calloc ( (size_t)(<CURSOR><+COUNT+>), sizeof(<+TYPE+>) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory allocation failed\n" );
	exit (EXIT_FAILURE);
}

free ( |POINTER| );
|POINTER|	= NULL;

== Idioms.malloc == map:ima, shortcut:m  ==
|?POINTER|	= malloc ( sizeof(<CURSOR><+TYPE+>) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory allocation failed\n" );
	exit (EXIT_FAILURE);
}

free ( |POINTER| );
|POINTER|	= NULL;

== Idioms.realloc == map:ire, shortcut:r  ==
|?POINTER|	= realloc ( |POINTER|, sizeof(<CURSOR><+TYPE+>) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory reallocation failed\n" );
	exit (EXIT_FAILURE);
}

== Idioms.sizeof == map:isi, shortcut:s, insert  ==
sizeof(<CURSOR><SPLIT>)
== Idioms.assert == map:ias, shortcut:a, insert  ==
assert( <CURSOR><SPLIT> );
== Idioms.open-input-file == map:ii, shortcut:i  ==
FILE	*|?FILEPOINTER|;										/* input-file pointer */
char	*|FILEPOINTER|_file_name = "<CURSOR>";		/* input-file name    */

|FILEPOINTER|	= fopen( |FILEPOINTER|_file_name, "r" );
if ( |FILEPOINTER| == NULL ) {
	fprintf ( stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}
<SPLIT>{-continue_here-}
if( fclose(|FILEPOINTER|) == EOF ) {			/* close input file   */
	fprintf ( stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}

== Idioms.open-output-file == map:io, shortcut:o  ==
FILE	*|?FILEPOINTER|;										/* output-file pointer */
char	*|FILEPOINTER|_file_name = "<CURSOR>";		/* output-file name    */

|FILEPOINTER|	= fopen( |FILEPOINTER|_file_name, "w" );
if ( |FILEPOINTER| == NULL ) {
	fprintf ( stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}
<SPLIT>{-continue_here-}
if( fclose(|FILEPOINTER|) == EOF ) {			/* close output file   */
	fprintf ( stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}

== Idioms.fprintf == map:ifpr, shortcut:f, insert  ==
fprintf ( |?FILEPOINTER|, "<CURSOR>\n",  );
== Idioms.fscanf == map:ifsc, shortcut:f, insert  ==
fscanf ( |?FILEPOINTER|, "<CURSOR>", & );
